===================fs-mark===================
1KB file * 1000 -> 10 times

#  ./fs_mark  -d  scratch  -L  10  -s  1024  -n  1000 
#	Version 3.3, 1 thread(s) starting at Wed May  4 09:49:58 2022
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1024 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.

FSUse%        Count         Size    Files/sec     App Overhead
    78         1000         1024        888.9            16533
    78         2000         1024       1446.5            13191
    78         3000         1024       1442.7            11999
    78         4000         1024       1411.6            11899
    78         5000         1024       1459.5            12021
    78         6000         1024       1451.7            11968
    78         7000         1024       1484.8             7774
    78         8000         1024       1533.5            11357
    78         9000         1024       1497.9            11694
    78        10000         1024       1459.6            11753
Average Files/sec:       1407.0
p50 Files/sec: 1451
p90 Files/sec: 888
p99 Files/sec: 888
10KB file * 1000 -> 10 times

#  ./fs_mark  -d  scratch  -L  10  -s  10240  -n  1000 
#	Version 3.3, 1 thread(s) starting at Wed May  4 09:50:06 2022
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 10240 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.

FSUse%        Count         Size    Files/sec     App Overhead
    78         1000        10240       1244.7            13264
    78         2000        10240       1280.6            12986
    78         3000        10240       1133.2            13663
    78         4000        10240       1171.7            13678
    78         5000        10240       1366.7            12430
    78         6000        10240       1468.3            11608
    78         7000        10240       1515.6            11542
    78         8000        10240       1447.7            11953
    78         9000        10240       1494.0             6918
    78        10000        10240       1526.9             7142
Average Files/sec:       1364.4
p50 Files/sec: 1366
p90 Files/sec: 1133
p99 Files/sec: 1133
100KB file * 1000 -> 10 times

#  ./fs_mark  -d  scratch  -L  10  -s  102400  -n  1000 
#	Version 3.3, 1 thread(s) starting at Wed May  4 09:50:13 2022
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 102400 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.

FSUse%        Count         Size    Files/sec     App Overhead
    78         1000       102400        689.7            12516
    78         2000       102400        719.8            12239
    78         3000       102400        703.9            12930
    78         4000       102400        717.4            12448
    78         5000       102400        710.9            12597
    78         6000       102400        693.0            12965
    78         7000       102400        727.6            12147
    78         8000       102400        706.5            12553
    78         9000       102400        713.6            12606
    78        10000       102400        727.4            11856
Average Files/sec:        710.4
p50 Files/sec: 710
p90 Files/sec: 689
p99 Files/sec: 689
1MB file * 1000 -> 10 times

#  ./fs_mark  -d  scratch  -L  10  -s  1048576  -n  1000 
#	Version 3.3, 1 thread(s) starting at Wed May  4 09:50:27 2022
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 1048576 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.

FSUse%        Count         Size    Files/sec     App Overhead
    78         1000      1048576        346.7            14160
    78         2000      1048576         37.6            42970
    78         3000      1048576         32.8            42860
    79         4000      1048576        342.7            14184
    79         5000      1048576        348.4            13951
    79         6000      1048576        342.4            14155
    79         7000      1048576        351.9            13817
    79         8000      1048576         46.4            33682
    79         9000      1048576         26.6            49325
    79        10000      1048576         41.2            31441
Average Files/sec:        191.1
p50 Files/sec: 46
p90 Files/sec: 26
p99 Files/sec: 26
10MB file * 100 -> 10 times

#  ./fs_mark  -d  scratch  -L  10  -s  10485760  -n  100 
#	Version 3.3, 1 thread(s) starting at Wed May  4 09:53:02 2022
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 10485760 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.

FSUse%        Count         Size    Files/sec     App Overhead
    79          100     10485760         51.0             2584
    79          200     10485760          8.0             4914
    80          300     10485760          3.9             6185
    80          400     10485760         11.1             3494
    80          500     10485760         50.1             2551
    80          600     10485760          9.9             4786
    80          700     10485760          4.3             6192
    80          800     10485760          3.3             5824
    80          900     10485760         13.7             3253
    80         1000     10485760         48.7             2698
Average Files/sec:         20.0
p50 Files/sec: 9
p90 Files/sec: 3
p99 Files/sec: 3
100MB file * 20 -> 10 times

#  ./fs_mark  -d  scratch  -L  10  -s  104857600  -n  20 
#	Version 3.3, 1 thread(s) starting at Wed May  4 09:55:07 2022
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 104857600 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.

FSUse%        Count         Size    Files/sec     App Overhead
    80           20    104857600          0.3             2958
    81           40    104857600          0.2             2790
    81           60    104857600          0.2             2271
    81           80    104857600          1.2             2543
    81          100    104857600          0.6             2581
    81          120    104857600          2.5             2315
    82          140    104857600          0.5             2741
    82          160    104857600          5.6             2263
    82          180    104857600          0.5             2875
    82          200    104857600          4.1             2205
Average Files/sec:          1.2
p50 Files/sec: 0
p90 Files/sec: 0
p99 Files/sec: 0
1GB file * 5 -> 10 times

#  ./fs_mark  -d  scratch  -L  10  -s  10485760  -n  5 
#	Version 3.3, 1 thread(s) starting at Wed May  4 10:02:18 2022
#	Sync method: INBAND FSYNC: fsync() per file in write loop.
#	Directories:  no subdirectories used
#	File names: 40 bytes long, (16 initial bytes of time stamp with 24 random bytes at end of name)
#	Files info: size 10485760 bytes, written with an IO size of 16384 bytes per write
#	App overhead is time in microseconds spent in the test not doing file writing related system calls.

FSUse%        Count         Size    Files/sec     App Overhead
    82            5     10485760         43.0              154
    82           10     10485760         41.9              143
    82           15     10485760         41.5              178
    82           20     10485760         48.3              132
    82           25     10485760         46.5              152
    82           30     10485760         40.8              176
    82           35     10485760         46.5              154
    82           40     10485760         44.0              170
    82           45     10485760         40.2              151
    82           50     10485760         37.8              232
Average Files/sec:         42.6
p50 Files/sec: 41
p90 Files/sec: 37
p99 Files/sec: 37
